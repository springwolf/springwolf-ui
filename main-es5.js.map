{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/channels/channel-main/channel-main.component.ts","webpack:///src/app/channels/channel-main/channel-main.component.html","webpack:///src/app/channels/channels.component.ts","webpack:///src/app/channels/channels.component.html","webpack:///src/app/header/header.component.ts","webpack:///src/app/header/header.component.html","webpack:///src/app/info/info.component.ts","webpack:///src/app/info/info.component.html","webpack:///src/app/material.module.ts","webpack:///src/app/schemas/schema/schema.component.ts","webpack:///src/app/schemas/schema/schema.component.html","webpack:///src/app/schemas/schemas.component.ts","webpack:///src/app/schemas/schemas.component.html","webpack:///src/app/servers/servers.component.ts","webpack:///src/app/servers/servers.component.html","webpack:///src/app/shared/asyncapi-mapper.service.ts","webpack:///src/app/shared/asyncapi.service.ts","webpack:///src/app/shared/components/json/json.component.ts","webpack:///src/app/shared/endpoints.ts","webpack:///src/app/shared/mock/mock-server.ts","webpack:///src/app/shared/models/channel.model.ts","webpack:///src/app/shared/models/example.model.ts","webpack:///src/app/shared/publisher.service.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","AppComponent","title","selector","templateUrl","styleUrls","AppModule","provide","useValue","languages","typescript","production","forRoot","delay","declarations","imports","providers","bootstrap","ChannelMainComponent","asyncApiService","publisherService","snackBar","getAsyncApi","subscribe","asyncapi","schemas","components","schemaName","operation","message","payload","name","slice","lastIndexOf","schema","get","defaultExample","example","exampleTextAreaLineCount","lineCount","headersSchemaName","headers","headersExample","headersTextAreaLineCount","protocolName","Object","bindings","field","text","split","length","payloadJson","JSON","parse","headersJson","publish","channelName","_","handlePublishSuccess","err","handlePublishError","error","open","duration","msg","status","NOT_FOUND","recalculateLineCount","ChannelsComponent","location","setChannelSelectionFromLocation","channels","sortChannels","sort","a","b","protocol","localeCompare","channel","window","hash","anchorIdentifier","anchor","startsWith","selectedChannel","HeaderComponent","InfoComponent","asyncApiData","info","json","stringify","bytes","TextEncoder","encode","blob","Blob","type","url","URL","createObjectURL","download","modules","MaterialModule","SchemaComponent","SchemasComponent","setSchemaSelectionFromLocation","selectedSchema","ServersComponent","servers","AsyncApiMapperService","item","mapServers","mapChannels","mapSchemas","s","Map","entries","forEach","k","v","set","Array","subscriberChannels","mapChannel","description","push","publisherChannels","topicName","serverOperation","operationType","undefined","messages","mapMessages","map","mapOperation","join","mapServerAsyncApiMessages","oneOf","$ref","anchorUrl","BASE_URL","pop","getProtocol","mapSchema","properties","format","required","pathname","search","AsyncApiService","http","asyncApiMapperService","docs","pipe","toAsyncApi","JsonComponent","data","template","styles","Endpoints","document","contextPath","getContextPath","mockAsyncApi","MockServer","kafka","reqInfo","console","log","endsWith","utils","createResponse$","OK","body","CHANNEL_ANCHOR_PREFIX","Example","exampleObject","value","PublisherService","topic","getPublishEndpoint","params","post","environment","bootstrapModule"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'springwolf';\n}\n","<app-header></app-header>\n<main fxLayout=\"column\" fxLayoutGap=\"24px\">\n    <app-info></app-info>\n    <app-servers></app-servers>\n    <app-channels></app-channels>\n    <app-schemas></app-schemas>\n</main>\n","import { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { HttpClientInMemoryWebApiModule } from 'angular-in-memory-web-api';\nimport { HighlightModule, HIGHLIGHT_OPTIONS } from 'ngx-highlightjs';\nimport { environment } from './../environments/environment';\nimport { AppComponent } from './app.component';\nimport { ChannelMainComponent } from './channels/channel-main/channel-main.component';\nimport { ChannelsComponent } from './channels/channels.component';\nimport { HeaderComponent } from './header/header.component';\nimport { InfoComponent } from './info/info.component';\nimport { MaterialModule } from './material.module';\nimport { SchemaComponent } from './schemas/schema/schema.component';\nimport { SchemasComponent } from './schemas/schemas.component';\nimport { ServersComponent } from './servers/servers.component';\nimport { AsyncApiService } from './shared/asyncapi.service';\nimport { MockServer } from './shared/mock/mock-server';\nimport { PublisherService } from './shared/publisher.service';\nimport { FormsModule } from '@angular/forms';\nimport { JsonComponent } from './shared/components/json/json.component';\nimport {AsyncApiMapperService} from \"./shared/asyncapi-mapper.service\";\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    HeaderComponent,\n    InfoComponent,\n    ServersComponent,\n    ChannelsComponent,\n    ChannelMainComponent,\n    SchemasComponent,\n    SchemaComponent,\n    JsonComponent,\n  ],\n  imports: [\n    BrowserModule,\n    BrowserAnimationsModule,\n    MaterialModule,\n    FlexLayoutModule,\n    HighlightModule,\n    HttpClientModule,\n    FormsModule,\n    environment.production ? [] : HttpClientInMemoryWebApiModule.forRoot(MockServer, { delay: 100 })\n  ],\n  providers: [\n    AsyncApiService,\n    AsyncApiMapperService,\n    PublisherService,\n    {\n      provide: HIGHLIGHT_OPTIONS,\n      useValue: {\n        languages: function () {\n          return { typescript: () => import('highlight.js/lib/languages/typescript') };\n        }\n      }\n    }\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Component, OnInit, Input } from '@angular/core';\nimport { AsyncApiService } from 'src/app/shared/asyncapi.service';\nimport { Example } from 'src/app/shared/models/example.model';\nimport { Schema } from 'src/app/shared/models/schema.model';\nimport { PublisherService } from 'src/app/shared/publisher.service';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { Operation } from 'src/app/shared/models/channel.model';\nimport { STATUS } from 'angular-in-memory-web-api';\n\n@Component({\n  selector: 'app-channel-main',\n  templateUrl: './channel-main.component.html',\n  styleUrls: ['./channel-main.component.css']\n})\nexport class ChannelMainComponent implements OnInit {\n\n  @Input() docName: string;\n  @Input() channelName: string;\n  @Input() operation: Operation;\n\n  schema: Schema;\n  schemaName: string;\n  defaultExample: Example;\n  exampleTextAreaLineCount: number;\n  headers: Schema;\n  headersSchemaName: string;\n  headersExample: Example;\n  headersTextAreaLineCount: number;\n  protocolName: string;\n\n  constructor(\n    private asyncApiService: AsyncApiService,\n    private publisherService: PublisherService,\n    private snackBar: MatSnackBar\n  ) {}\n\n\n  ngOnInit(): void {\n    this.asyncApiService.getAsyncApi().subscribe(\n      asyncapi => {\n        let schemas: Map<string, Schema> = asyncapi.components.schemas;\n        this.schemaName = this.operation.message.payload.name.slice(this.operation.message.payload.name.lastIndexOf('/') + 1)\n        this.schema = schemas.get(this.schemaName);\n\n        this.defaultExample = this.schema.example;\n        this.exampleTextAreaLineCount = this.defaultExample?.lineCount || 0;\n\n        this.headersSchemaName = this.operation.message.headers.name.slice(this.operation.message.headers.name.lastIndexOf('/') + 1)\n        this.headers = schemas.get(this.headersSchemaName);\n        this.headersExample = this.headers.example;\n        this.headersTextAreaLineCount = this.headersExample?.lineCount || 0;\n      }\n    );\n\n    this.protocolName = Object.keys(this.operation.bindings)[0];\n  }\n\n  recalculateLineCount(field: string, text: string): void {\n    switch (field) {\n      case 'example':\n        this.exampleTextAreaLineCount = text.split('\\n').length;\n        break;\n      case 'headers':\n        this.headersTextAreaLineCount = text.split('\\n').length\n        break;\n    }\n  }\n\n  publish(example: string, headers: string): void {\n    try {\n      const payloadJson = JSON.parse(example);\n      const headersJson = JSON.parse(headers)\n\n      this.publisherService.publish(this.protocolName, this.channelName, payloadJson, headersJson).subscribe(\n        _ => this.handlePublishSuccess(),\n        err => this.handlePublishError(err)\n      );\n    } catch(error) {\n      this.snackBar.open('Example payload is not valid', 'ERROR', {\n        duration: 3000\n      })\n    }\n  }\n\n  private handlePublishSuccess() {\n    return this.snackBar.open('Example payload sent to: ' + this.channelName, 'PUBLISHED', {\n      duration: 3000\n    });\n  }\n\n  private handlePublishError(err: {status?: number}) {\n    let msg = 'Publish failed';\n    if (err?.status === STATUS.NOT_FOUND) {\n      msg += ': no publisher was provided for ' + this.protocolName;\n    }\n\n    return this.snackBar.open(msg, 'ERROR', {\n      duration: 4000\n    });\n  }\n\n}\n","<section>\n    <mat-divider></mat-divider>\n    <div *ngIf=\"operation.message.description\">\n      <h4>{{ operation.message.description }}</h4>\n      <mat-divider></mat-divider>\n    </div>\n    <mat-tab-group animationDuration=\"0ms\">\n      <mat-tab label=\"Example\">\n        <div fxLayout=\"column\">\n          <textarea spellcheck=\"false\"\n                    #exampleTextArea\n                    [rows]=\"exampleTextAreaLineCount\"\n                    [value]=\"defaultExample?.value\"\n                    (keyup)=\"recalculateLineCount('example', exampleTextArea.value)\"\n          ></textarea>\n          <div fxLayout fxLayoutGap=\"8px\">\n            <button mat-raised-button color=\"primary\" (click)=\"publish(exampleTextArea.value, headersTextArea.value)\">\n              Publish\n            </button>\n            <button mat-raised-button color=\"primary\"\n                    (click)=\"exampleTextArea.value = defaultExample.value; exampleTextAreaLineCount=defaultExample.lineCount\">\n              Default\n            </button>\n            <button mat-raised-button color=\"primary\" [cdkCopyToClipboard]=\"exampleTextArea.value\">Copy</button>\n          </div>\n        </div>\n      </mat-tab>\n      <mat-tab label=\"Schema\">\n        <h4>\n          {{ schemaName }}\n          <span class=\"payload-name\">\n            <a [href]=\"operation.message.payload.anchorUrl\" >{{ operation.message.payload.name }}</a>\n          </span>\n        </h4>\n        <app-schema *ngIf=\"schema\" [schema]=\"schema\"></app-schema>\n      </mat-tab>\n      <mat-tab label=\"Headers\">\n        <h4>\n          {{ headersSchemaName }}\n          <span class=\"header-name\">\n            <a [href]=\"operation.message.headers.anchorUrl\">{{ operation.message.headers.name }}</a>\n          </span>\n        </h4>\n        <app-schema *ngIf=\"headers\" [schema]=\"headers\"></app-schema>\n        <div fxLayout=\"column\">\n          <textarea spellcheck=\"false\"\n                    #headersTextArea\n                    [rows]=\"headersTextAreaLineCount\"\n                    [value]=\"headersExample?.value\"\n                    (keyup)=\"recalculateLineCount('headers', headersTextArea.value)\"\n          ></textarea>\n        </div>\n      </mat-tab>\n      <mat-tab label=\"Bindings\">\n        <app-json [data]=\"operation.bindings[protocolName]\"></app-json>\n      </mat-tab>\n    </mat-tab-group>\n</section>\n","import { Component, OnInit } from '@angular/core';\nimport { AsyncApiService } from '../shared/asyncapi.service';\nimport {Channel, CHANNEL_ANCHOR_PREFIX} from '../shared/models/channel.model';\nimport { Location } from \"@angular/common\";\n\n@Component({\n  selector: 'app-channels',\n  templateUrl: './channels.component.html',\n  styleUrls: ['./channels.component.css']\n})\nexport class ChannelsComponent implements OnInit {\n\n  channels: Channel[];\n  selectedChannel: string;\n  docName: string;\n\n  constructor(private asyncApiService: AsyncApiService, private location: Location) {\n    this.setChannelSelectionFromLocation()\n  }\n\n  ngOnInit(): void {\n    this.location.subscribe((): void => this.setChannelSelectionFromLocation())\n\n    this.asyncApiService.getAsyncApi().subscribe(asyncapi => {\n      this.channels = this.sortChannels(asyncapi.channels);\n    });\n  }\n\n  private sortChannels(channels: Array<Channel>): Array<Channel> {\n    return channels.sort((a, b) => {\n      if (a.operation.protocol === b.operation.protocol) {\n        if (a.operation.operation === b.operation.operation) {\n          if(a.name === b.name) {\n            return a.operation.message.name.localeCompare(b.operation.message.name)\n          } else {\n            return a.name.localeCompare(b.name);\n          }\n        } else {\n          return a.operation.operation.localeCompare(b.operation.operation);\n        }\n      } else {\n        return a.operation.protocol.localeCompare(b.operation.protocol);\n      }\n    });\n  }\n\n  setChannelSelection(channel: Channel): void {\n    window.location.hash = channel.anchorIdentifier\n  }\n  setChannelSelectionFromLocation(): void {\n    const anchor = window.location.hash;\n    if (anchor.startsWith(CHANNEL_ANCHOR_PREFIX)) {\n      this.selectedChannel = anchor;\n    }\n  }\n}\n","<h1>Channels</h1>\n\n<a href=\"https://www.asyncapi.com/blog/publish-subscribe-semantics\" target=\"_blank\">Semantics of publish and subscribe:</a>\n<ul>\n  <li>\n    <span class=\"badge publish-badge\">\n      publish\n      <i class=\"fa fa-arrow-circle-down\"></i>\n    </span>\n    means publish an event to the channel and this application will receive it\n  </li>\n  <li>\n    <span class=\"badge subscribe-badge\">\n     subscribe\n      <i class=\"fa fa-arrow-circle-up\"></i>\n    </span>\n    means subscribe to this channel to receive events published by this application\n  </li>\n</ul>\n\n<mat-accordion>\n    <mat-expansion-panel *ngFor=\"let channel of channels\" [id]=\"channel.anchorIdentifier\" [expanded]=\"selectedChannel == channel.anchorIdentifier\" (opened)=\"this.setChannelSelection(channel)\">\n        <mat-expansion-panel-header>\n            <mat-panel-title fxLayout fxLayoutAlign=\"flex-start center\" fxLayoutGap=\"16px\">\n                <div class=\"badge protocol-badge\" >\n                    {{ channel.operation.protocol }}\n                </div>\n                <div class=\"badge\" [ngClass]=\"{'publish-badge': channel.operation.operation === 'publish', 'subscribe-badge': channel.operation.operation === 'subscribe'}\">\n                    {{ channel.operation.operation }}\n                    <i class=\"fa {{channel.operation.operation == 'publish' ? 'fa-arrow-circle-down' : 'fa-arrow-circle-up'}}\"></i>\n                </div>\n                <h3>{{ channel.name }}</h3>\n                <div class=\"payload-name\">{{ channel.operation.message.title }}</div>\n            </mat-panel-title>\n        </mat-expansion-panel-header>\n        <app-channel-main\n            [channelName]=\"channel.name\"\n            [operation]=\"channel.operation\"\n            [docName]=\"docName\">\n        </app-channel-main>\n    </mat-expansion-panel>\n</mat-accordion>\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-header',\n  templateUrl: './header.component.html',\n  styleUrls: ['./header.component.css']\n})\nexport class HeaderComponent {\n}\n","<mat-toolbar color=\"primary\" fxLayout fxLayoutAlign=\"space-between center\">\n    <h2>springwolf</h2>\n    <a href=\"https://github.com/stavshamir/springwolf\">\n        <i class=\"fa fa-github fa-2x\"></i>\n    </a>\n</mat-toolbar>","import { Component, OnInit } from '@angular/core';\nimport { AsyncApi } from '../shared/models/asyncapi.model';\nimport { Info } from '../shared/models/info.model';\nimport { AsyncApiService } from '../shared/asyncapi.service';\n\n@Component({\n  selector: 'app-info',\n  templateUrl: './info.component.html',\n  styleUrls: ['./info.component.css']\n})\nexport class InfoComponent implements OnInit {\n\n  asyncApiData: AsyncApi;\n  info: Info;\n\n  constructor(private asyncApiService: AsyncApiService) { }\n\n  ngOnInit(): void {\n    this.asyncApiService.getAsyncApi().subscribe(asyncapi => {\n      this.asyncApiData = asyncapi;\n      this.info = asyncapi.info;\n    });\n  }\n\n  download(): Boolean {\n    var json = JSON.stringify(this.asyncApiData, null, 2);\n    var bytes = new TextEncoder().encode(json);\n    var blob = new Blob([bytes], { type: 'application/json' });\n    var url = window.URL.createObjectURL(blob);\n    window.open(url);\n\n    return false;\n  }\n\n}\n","<h1>{{ info?.title }}</h1>\n<h5>\n  API VERSION {{ info?.version }}\n  -\n  <a href=\"javascript:void(0);\" (click)=\"download()\">AsyncAPI JSON file</a>\n</h5>\n<p *ngIf=\"info?.description\">{{ info.description }}</p>\n","import { NgModule } from '@angular/core';\n\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatDividerModule } from '@angular/material/divider';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatSelectModule } from '@angular/material/select';\n\nconst modules = [\n    MatButtonModule,\n    MatIconModule,\n    MatToolbarModule,\n    MatCardModule,\n    MatExpansionModule,\n    MatTabsModule,\n    MatDividerModule,\n    ClipboardModule,\n    MatSnackBarModule,\n    MatFormFieldModule,\n    MatSelectModule\n]\n\n@NgModule({\n    imports: modules,\n    exports: modules\n})\nexport class MaterialModule { }\n","import { Component, Input } from '@angular/core';\nimport { Schema } from 'src/app/shared/models/schema.model';\n\n@Component({\n  selector: 'app-schema',\n  templateUrl: './schema.component.html',\n  styleUrls: ['./schema.component.css']\n})\nexport class SchemaComponent {\n\n  @Input() schema: Schema;\n\n}\n","<table class=\"schema\">\r\n  <tbody>\r\n  <tr *ngFor=\"let property of schema?.properties | keyvalue\">\r\n    <td class=\"key\">\r\n      {{ property.key }}\r\n      <span class=\"required\" *ngIf=\"schema.required?.includes(property.key)\">*</span>\r\n    </td>\r\n    <td>\r\n      <span class=\"type\" *ngIf=\"property.value.type\">{{ property.value.type }}</span>\r\n      <span class=\"type\" *ngIf=\"property.value.name\">\r\n        <a [href]=\"property.value.anchorUrl\">{{ property.value.name }}</a>\r\n      </span>\r\n      <span class=\"format\" *ngIf=\"property.value.format\">({{ property.value.format }})</span>\r\n      <div class=\"description\">{{ property.value.description }}</div>\r\n      <span class=\"example\" *ngIf=\"property.value.example\">example: {{ property.value.example.value }}</span>\r\n      <mat-select *ngIf=\"property.value.enum\" placeholder=\"Enum\">\r\n        <mat-option *ngFor=\"let enum of property.value.enum\" [value]=\"enum\">{{ enum }}</mat-option>\r\n      </mat-select>\r\n    </td>\r\n  </tbody>\r\n</table>\r\n","import { Component, OnInit } from '@angular/core';\nimport { Location } from '@angular/common';\nimport { AsyncApiService } from '../shared/asyncapi.service';\nimport { Schema } from '../shared/models/schema.model';\n\n@Component({\n  selector: 'app-schemas',\n  templateUrl: './schemas.component.html',\n  styleUrls: ['./schemas.component.css']\n})\nexport class SchemasComponent implements OnInit {\n\n\n  schemas: Map<string, Schema>;\n  selectedSchema: string;\n\n  constructor(private asyncApiService: AsyncApiService, private location: Location) {\n    this.setSchemaSelectionFromLocation()\n  }\n\n  ngOnInit(): void {\n    this.location.subscribe(() : void => this.setSchemaSelectionFromLocation())\n      this.asyncApiService.getAsyncApi().subscribe(asyncapi => this.schemas = asyncapi.components.schemas);\n  }\n\n  setSchemaSelection(schema: Schema): void {\n    window.location.hash = schema.anchorIdentifier\n  }\n  setSchemaSelectionFromLocation(): void {\n    this.selectedSchema = window.location.hash;\n  }\n}\n","<h1>Schemas</h1>\n<mat-accordion>\n    <mat-expansion-panel *ngFor=\"let schema of schemas | keyvalue;\" [id]=\"schema.value.anchorIdentifier\" [expanded]=\"selectedSchema == schema.value.anchorIdentifier\" (opened)=\"this.setSchemaSelection(schema.value)\">\n        <mat-expansion-panel-header>\n            <mat-panel-title>\n                <h3>{{ schema.key }}</h3>\n            </mat-panel-title>\n            <mat-panel-description>\n                {{ schema.value.description }}\n            </mat-panel-description>\n        </mat-expansion-panel-header>\n        <app-schema [schema]=\"schema?.value\"></app-schema>\n    </mat-expansion-panel>\n</mat-accordion>\n","import { Component, OnInit } from '@angular/core';\nimport { AsyncApiService } from '../shared/asyncapi.service';\nimport { Server } from '../shared/models/server.model';\n\n@Component({\n  selector: 'app-servers',\n  templateUrl: './servers.component.html',\n  styleUrls: ['./servers.component.css']\n})\nexport class ServersComponent implements OnInit {\n\n  servers: Map<string, Server>;\n\n  constructor(private asyncApiService: AsyncApiService) { }\n\n  ngOnInit(): void {\n      this.asyncApiService.getAsyncApi().subscribe(asyncapi => this.servers = asyncapi.servers );\n  }\n\n}\n","<h1>Servers</h1>\n<mat-card *ngFor=\"let server of servers | keyvalue\">\n    <mat-card-title>{{ server.key }}</mat-card-title>\n    <mat-card-content>\n        {{ server.value.url }}\n    </mat-card-content>\n</mat-card>","import { AsyncApi } from './models/asyncapi.model';\nimport { Server } from './models/server.model';\nimport {Channel, CHANNEL_ANCHOR_PREFIX, Message, Operation, OperationType} from './models/channel.model';\nimport { Schema } from './models/schema.model';\nimport { Injectable } from '@angular/core';\nimport {Example} from \"./models/example.model\";\n\ninterface ServerAsyncApiSchema {\n  description?: string;\n  type: string;\n  format: string;\n  enum: string[];\n  properties?: Map<string, ServerAsyncApiSchema>;\n  example?: {\n    [key: string]: object;\n  };\n  required?: string[];\n  $ref?: string;\n}\n\ninterface ServerAsyncApiMessage {\n  name: string;\n  title: string;\n  description?: string;\n  payload: { $ref: string };\n  headers: { $ref: string };\n}\n\ninterface ServerAsyncApiInfo {\n  title: string;\n  version: string;\n  description?: string;\n}\n\nexport type ServerAsyncApiChannelMessage = ServerAsyncApiMessage | { oneOf: ServerAsyncApiMessage[] };\nexport interface ServerAsyncApi {\n    asyncapi: string;\n    info: ServerAsyncApiInfo;\n    servers: {\n        [key: string]: {\n            url: string;\n            protocol: string;\n        };\n    };\n    channels: {\n        [key: string]: {\n            description?: string;\n            subscribe?: {\n                message: ServerAsyncApiChannelMessage;\n                bindings?: any;\n            };\n            publish?: {\n                message: ServerAsyncApiChannelMessage;\n                bindings?: any;\n            };\n        };\n    };\n    components: {\n        schemas: Map<string, ServerAsyncApiSchema>;\n    };\n}\n\n@Injectable()\nexport class AsyncApiMapperService {\n    static BASE_URL = window.location.pathname + window.location.search + \"#\";\n\n    constructor() {\n    }\n\n    public toAsyncApi(item: ServerAsyncApi): AsyncApi {\n        return {\n            info: item.info,\n            servers: this.mapServers(item.servers),\n            channels: this.mapChannels(item.channels),\n            components: {\n                schemas: this.mapSchemas(item.components.schemas)\n            }\n        };\n    }\n\n    private mapServers(servers: ServerAsyncApi[\"servers\"]): Map<string, Server> {\n        const s = new Map<string, Server>();\n        Object.entries(servers).forEach(([k, v]) => s.set(k, v));\n        return s;\n    }\n\n    private mapChannels(channels: ServerAsyncApi[\"channels\"]): Channel[] {\n        const s = new Array<Channel>();\n        Object.entries(channels).forEach(([k, v]) => {\n            const subscriberChannels = this.mapChannel(k, v.description, v.subscribe, \"subscribe\")\n            subscriberChannels.forEach(channel => s.push(channel))\n\n            const publisherChannels = this.mapChannel(k, v.description, v.publish, \"publish\")\n            publisherChannels.forEach(channel => s.push(channel))\n        });\n        return s;\n    }\n\n    private mapChannel(\n        topicName: string,\n        description: ServerAsyncApi[\"channels\"][\"\"][\"description\"],\n        serverOperation: ServerAsyncApi[\"channels\"][\"\"][\"subscribe\"] | ServerAsyncApi[\"channels\"][\"\"][\"publish\"],\n        operationType: OperationType): Channel[]\n    {\n        if(serverOperation !== undefined) {\n            let messages: Message[] = this.mapMessages(serverOperation.message)\n\n            return messages.map(message => {\n                const operation = this.mapOperation(operationType, message, serverOperation.bindings)\n                return {\n                    name: topicName,\n                    anchorIdentifier: CHANNEL_ANCHOR_PREFIX + [operation.protocol, topicName, operation.operation, operation.message.title].join( \"-\"),\n                    description: description,\n                    operation: operation,\n                }\n            })\n        }\n        return [];\n    }\n\n    private mapMessages(message: ServerAsyncApiChannelMessage): Message[] {\n      if('oneOf' in message) {\n        return this.mapServerAsyncApiMessages(message.oneOf)\n      }\n      return this.mapServerAsyncApiMessages([message]);\n    }\n\n    private mapServerAsyncApiMessages(messages: ServerAsyncApiMessage[]): Message[] {\n      return messages.map((v) => {\n        return {\n          name: v.name,\n          title: v.title,\n          description: v.description,\n          payload: {\n            name: v.payload.$ref,\n            anchorUrl: AsyncApiMapperService.BASE_URL  +v.payload.$ref?.split('/')?.pop()\n          },\n          headers: {\n            name: v.headers.$ref,\n            anchorUrl: AsyncApiMapperService.BASE_URL + v.headers.$ref?.split('/')?.pop()\n          }\n        }\n      })\n    }\n\n    private mapOperation(operationType: OperationType, message: Message, bindings?: any): Operation {\n        return {\n            protocol: this.getProtocol(bindings),\n            operation: operationType,\n            message: message,\n            bindings: bindings\n        }\n    }\n\n    private getProtocol(bindings?: any): string {\n        return Object.keys(bindings)[0];\n    }\n\n    private mapSchemas(schemas: Map<string, ServerAsyncApiSchema>): Map<string, Schema> {\n      const s = new Map<string, Schema>();\n      Object.entries(schemas).forEach(([k, v]) => s.set(k, this.mapSchema(k, v)));\n      return s;\n    }\n\n    private mapSchema(schemaName: string, schema: ServerAsyncApiSchema): Schema {\n      const properties = schema.properties !== undefined ? this.mapSchemas(schema.properties) : undefined\n      const example = schema.example !== undefined ? new Example(schema.example) : undefined\n      return {\n        name: schema.$ref,\n        description: schema.description,\n        anchorIdentifier: '#' + schemaName,\n        anchorUrl: AsyncApiMapperService.BASE_URL + schema.$ref?.split('/')?.pop(),\n        type: schema.type,\n        format: schema.format,\n        enum: schema.enum,\n        properties: properties,\n        required: schema.required,\n        example: example,\n      }\n    }\n}\n","import { AsyncApi } from './models/asyncapi.model';\nimport { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { Endpoints } from './endpoints';\nimport {AsyncApiMapperService, ServerAsyncApi} from \"./asyncapi-mapper.service\";\n\n@Injectable()\nexport class AsyncApiService {\n\n    private docs: AsyncApi;\n\n    constructor(private http: HttpClient, private asyncApiMapperService: AsyncApiMapperService) {\n    }\n\n    public getAsyncApi(): Observable<AsyncApi> {\n        if (this.docs) {\n            return of(this.docs);\n        }\n\n        return this.http.get<ServerAsyncApi>(Endpoints.docs).pipe(map(item => {\n            this.docs = this.asyncApiMapperService.toAsyncApi(item);\n            return this.docs;\n        }));\n    }\n}\n","import { Component, OnInit, Input } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-json',\r\n  template: '<pre><code [highlight]=\"json\"></code></pre>',\r\n  styles: [`code {\r\n    margin-top: 16px;\r\n    padding: 8px;\r\n    border-radius: 4px;\r\n  }`]\r\n})\r\nexport class JsonComponent implements OnInit {\r\n\r\n  @Input() data: any;\r\n  json: string;\r\n\r\n  ngOnInit(): void {\r\n    this.json = JSON.stringify(this.data, null, 2);\r\n  }\r\n\r\n}\r\n","export class Endpoints {\n\n    private static contextPath = Endpoints.getContextPath();\n\n    private static getContextPath(): string {\n        let url = document.location.pathname;\n        return url.split(\"/asyncapi-ui.html\")[0];\n    }\n\n    public static docs = Endpoints.contextPath + '/docs';\n\n    public static getPublishEndpoint(protocol: string): string {\n        return Endpoints.contextPath + `/${protocol}/publish`;\n    }\n\n}\n\n","import { InMemoryDbService, RequestInfo, STATUS } from 'angular-in-memory-web-api';\nimport mockSpringwolfApp from './mock.springwolf-app.json';\nimport mockSpringwolfAmqp from './mock.springwolf-amqp-example.json';\nimport mockSpringwolfKafka from './mock.springwolf-kafka-example.json';\n\nconst mockAsyncApi = {\n  ...mockSpringwolfApp,\n  ...mockSpringwolfAmqp,\n  ...mockSpringwolfKafka,\n}\n\nexport class MockServer implements InMemoryDbService {\n  createDb() {\n    return {kafka: []};\n  }\n\n  get(reqInfo: RequestInfo) {\n    console.log(\"Returning mock data\")\n    if (reqInfo.req.url.endsWith('/docs')) {\n      return reqInfo.utils.createResponse$(() => {\n        return {\n          status: STATUS.OK,\n          body: mockSpringwolfKafka\n        }\n      });\n    }\n\n    return undefined;\n  }\n\n  post(reqInfo: RequestInfo) {\n    if (reqInfo.req.url.endsWith('/publish')) {\n      return reqInfo.utils.createResponse$(() => {\n        return {\n          status: STATUS.OK\n        }\n      })\n    }\n\n    return undefined;\n  }\n\n}\n","export const CHANNEL_ANCHOR_PREFIX = \"#channel-\"\nexport interface Channel {\n    name: string;\n    anchorIdentifier: string;\n    description?: string;\n    operation: Operation;\n}\n\nexport type OperationType = \"publish\" | \"subscribe\";\nexport interface Operation {\n    message: Message;\n    bindings?: { [type: string]: any };\n    protocol: string;\n    operation: OperationType;\n}\n\nexport interface Message {\n    name: string;\n    title: string;\n    description?: string;\n    payload: {\n      name: string;\n      anchorUrl: string;\n    };\n    headers: {\n      name: string\n      anchorUrl: string;\n    };\n}\n","export class Example {\n\n  public value: string;\n  public lineCount: number;\n\n  constructor(exampleObject: object) {\n    this.value = JSON.stringify(exampleObject, null, 2);\n    this.lineCount = this.value.split('\\n').length;\n  }\n\n}","import { Injectable } from '@angular/core';\nimport {HttpClient, HttpParams} from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { Endpoints } from './endpoints';\n\n@Injectable()\nexport class PublisherService {\n\n  constructor(private http: HttpClient) { }\n\n  publish(protocol: string, topic: string, payload: object, headers: object): Observable<unknown> {\n    const url = Endpoints.getPublishEndpoint(protocol);\n    const params = new HttpParams().set('topic', topic);\n    const body = {\"payload\" : payload, \"headers\" : headers }\n    console.log(`Publishing to ${url}`);\n    return this.http.post(url, body, { params });\n  }\n\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}